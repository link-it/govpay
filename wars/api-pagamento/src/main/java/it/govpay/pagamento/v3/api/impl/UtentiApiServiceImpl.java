package it.govpay.pagamento.v3.api.impl;

import java.text.MessageFormat;

import javax.servlet.http.HttpSession;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.openspcoop2.utils.service.context.ContextThreadLocal;
import org.springframework.security.core.Authentication;

import it.govpay.core.dao.anagrafica.UtentiDAO;
import it.govpay.core.dao.anagrafica.dto.LeggiProfiloDTOResponse;
import it.govpay.pagamento.v3.api.UtentiApi;
import it.govpay.pagamento.v3.beans.Profilo;
import it.govpay.pagamento.v3.beans.converter.ProfiloConverter;


/**
 * GovPay - API Pagamento
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class UtentiApiServiceImpl extends BaseApiServiceImpl implements UtentiApi {
	
	public UtentiApiServiceImpl() {
		super("profilo", UtentiApiServiceImpl.class);
	}
	
    /**
     * Elenco delle acl associate all&#x27;utenza chiamante
     *
     */
    public Response getProfilo() {
    	this.buildContext();
		Authentication user = this.getUser();
		String methodName = "getProfilo";
 		String transactionId = ContextThreadLocal.get().getTransactionId();
 		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName));
 		try{
 			UtentiDAO utentiDAO = new UtentiDAO();

 			LeggiProfiloDTOResponse leggiProfilo = utentiDAO.getProfilo(user);

 			Profilo profilo = ProfiloConverter.getProfilo(leggiProfilo);

 			this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName));
 			return this.handleResponseOk(Response.status(Status.OK).entity(profilo),transactionId).build();

 		}catch (Exception e) {
 			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
 		} finally {
 			this.log(ContextThreadLocal.get());
 		}
    }
    
    /**
     * Logout
     *
     */
    public Response logout() {
    	this.buildContext();
    	String methodName = "logout";  
 		String transactionId = ContextThreadLocal.get().getTransactionId();
 		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName)); 
 		try{
 			if(this.request.getSession() != null) {
 				HttpSession session = this.request.getSession();
 				session.invalidate();
 			}

 			this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName)); 
 			return this.handleResponseOk(Response.ok(),transactionId).build();
 		}catch (Exception e) {
 			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
 		} finally {
 			this.log(ContextThreadLocal.get());
 		}
        
        
    }
    
}

