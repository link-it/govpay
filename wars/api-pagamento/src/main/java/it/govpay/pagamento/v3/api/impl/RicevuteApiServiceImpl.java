package it.govpay.pagamento.v3.api.impl;

import java.net.URLDecoder;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.lang.ArrayUtils;
import org.openspcoop2.generic_project.exception.ServiceException;
import org.openspcoop2.utils.service.context.ContextThreadLocal;
import org.springframework.security.core.Authentication;

import it.govpay.bd.BDConfigWrapper;
import it.govpay.bd.model.PagamentoPortale;
import it.govpay.bd.model.Rpt;
import it.govpay.bd.model.Versamento;
import it.govpay.core.autorizzazione.AuthorizationManager;
import it.govpay.core.autorizzazione.beans.GovpayLdapUserDetails;
import it.govpay.core.autorizzazione.utils.AutorizzazioneUtils;
import it.govpay.core.dao.pagamenti.RptDAO;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTO.FormatoRicevuta;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTOResponse;
import it.govpay.core.dao.pagamenti.dto.LeggiRptDTOResponse;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTOResponse;
import it.govpay.core.dao.pagamenti.exception.RicevutaNonTrovataException;
import it.govpay.core.exceptions.NotAcceptableException;
import it.govpay.core.exceptions.NotAuthorizedException;
import it.govpay.core.exceptions.ValidationException;
import it.govpay.core.utils.GovpayConfig;
import it.govpay.core.utils.validator.ValidatoreIdentificativi;
import it.govpay.model.Acl.Diritti;
import it.govpay.model.Acl.Servizio;
import it.govpay.model.Rpt.EsitoPagamento;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.pagamento.v2.controller.BaseController;
import it.govpay.pagamento.v3.api.RicevuteApi;
import it.govpay.pagamento.v3.beans.EsitoRpp;
import it.govpay.pagamento.v3.beans.Ricevuta;
import it.govpay.pagamento.v3.beans.Ricevute;
import it.govpay.pagamento.v3.beans.RicevuteRisultati;
import it.govpay.pagamento.v3.beans.converter.RicevuteConverter;


/**
 * GovPay - API Pagamento
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class RicevuteApiServiceImpl extends BaseApiServiceImpl implements RicevuteApi {


	public RicevuteApiServiceImpl() {
		super("ricevute", RicevuteApiServiceImpl.class);
	}

	/**
	 * Ricerca delle ricevute di pagamento per identificativo transazione
	 *
	 */
	public Response findRicevute(String idDominio, String iuv, String esito) {
		this.buildContext();
		Authentication user = this.getUser();
		String methodName = "findRicevute";
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName));
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.ANONIMO, TIPO_UTENZA.CITTADINO, TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_PAGAMENTI), Arrays.asList(Diritti.LETTURA));

			ValidatoreIdentificativi validatoreId = ValidatoreIdentificativi.newInstance();
			validatoreId.validaIdDominio("idDominio", idDominio);

			// Parametri - > DTO Input

			ListaRptDTO listaRptDTO = new ListaRptDTO(user);

			listaRptDTO.setEsitoPagamento(null);

			// path parameters
			listaRptDTO.setIdDominio(idDominio);
			listaRptDTO.setIuv(iuv);

			// esito
			if(esito != null) {
				EsitoRpp et = EsitoRpp.fromValue(esito);

				if(et == null) {
					throw new ValidationException("Codifica inesistente per esito. Valore fornito [" + esito + "] valori possibili " + ArrayUtils.toString(EsitoRpp.values()));
				}

				EsitoPagamento esitoPagamento = null;

				switch (et) {
				case DECORRENZA:
					esitoPagamento = EsitoPagamento.DECORRENZA_TERMINI;
					break;
				case DECORRENZA_PARZIALE:
					esitoPagamento = EsitoPagamento.DECORRENZA_TERMINI_PARZIALE;
					break;
				case ESEGUITO:
					esitoPagamento = EsitoPagamento.PAGAMENTO_ESEGUITO;
					break;
				case ESEGUITO_PARZIALE:
					esitoPagamento = EsitoPagamento.PAGAMENTO_PARZIALMENTE_ESEGUITO;
					break;
				case IN_CORSO:
					esitoPagamento = EsitoPagamento.IN_CORSO;
					break;
				case NON_ESEGUITO:
					esitoPagamento = EsitoPagamento.PAGAMENTO_NON_ESEGUITO;
					break;
				case RIFIUTATO:
					esitoPagamento = EsitoPagamento.RIFIUTATO;
					break;
				}

				listaRptDTO.setEsitoPagamento(esitoPagamento);
			}

			GovpayLdapUserDetails userDetails = AutorizzazioneUtils.getAuthenticationDetails(listaRptDTO.getUser());
			if(userDetails.getTipoUtenza().equals(TIPO_UTENZA.CITTADINO)) {
				listaRptDTO.setCfCittadino(userDetails.getIdentificativo()); 
			}

			if(userDetails.getTipoUtenza().equals(TIPO_UTENZA.ANONIMO)) {
				listaRptDTO.setCfCittadino(TIPO_UTENZA.ANONIMO.toString()); 

				// utenza anonima puo' vedere le transazioni non piu' vecchie della soglia impostata nelle properties
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(new Date());
				calendar.add(Calendar.MINUTE, -GovpayConfig.getInstance().getIntervalloDisponibilitaPagamentoUtenzaAnonima());
				listaRptDTO.setDataPagamentoDa(calendar.getTime());
			}

			// se sei una applicazione allora vedi i pagamenti che hai caricato
			if(userDetails.getTipoUtenza().equals(TIPO_UTENZA.APPLICAZIONE)) {
				listaRptDTO.setIdA2APagamentoPortale(userDetails.getApplicazione().getCodApplicazione()); 
			}

			// INIT DAO

			RptDAO rptDAO = new RptDAO();

			ListaRptDTOResponse listaRptDTOResponse = rptDAO.listaRpt(listaRptDTO);

			// se la ricerca per la coppia idDominio/iuv non ha prodotto alcun risultato allora restituisco 404
			if(listaRptDTOResponse.getResults().size() == 0) {
				throw new RicevutaNonTrovataException("Non sono presenti ricevute per [IdDominio: "+idDominio+", IUV: "+iuv+"].");
			}

			// filtro dei risultati, vengono restituite solo e rpt con ricevuta e autorizzazione per il tipo utente.
			List<LeggiRptDTOResponse> resultsFromDB = listaRptDTOResponse.getResults();
			List<LeggiRptDTOResponse> resultsFiltrati = new ArrayList<>();
			for(LeggiRptDTOResponse leggiRptDtoResponse: resultsFromDB) {
				if(leggiRptDtoResponse.getRpt().getCodMsgRicevuta() != null) {
					resultsFiltrati.add(leggiRptDtoResponse);
				}
			}

			// CONVERT TO JSON DELLA RISPOSTA
			Ricevute response = new Ricevute(this.getServicePath(uriInfo), (long) resultsFiltrati.size(), null, null);

			List<RicevuteRisultati> results = new ArrayList<>();
			for(LeggiRptDTOResponse leggiRptDtoResponse: resultsFiltrati) {
				results.add(RicevuteConverter.toRsModelIndex(leggiRptDtoResponse.getRpt()));
			}
			response.setRisultati(results);

			this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName));
			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();
		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.log(ContextThreadLocal.get());
		}
	}

	/**
	 * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
	 *
	 * Ricevuta pagoPA, sia questa veicolata nella forma di &#x60;RT&#x60; o di &#x60;recepit&#x60;, di esito positivo. 
	 *
	 */
	public Response getRicevuta(String idDominio, String iuv, String idRicevuta) {
		this.buildContext();
		Authentication user = this.getUser();
		String methodName = "getRicevuta";
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName));

		String accept = "";
		if(httpHeaders.getRequestHeaders().containsKey("Accept")) {
			accept = httpHeaders.getRequestHeaders().get("Accept").get(0).toLowerCase();
		}
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.ANONIMO, TIPO_UTENZA.CITTADINO, TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_PAGAMENTI), Arrays.asList(Diritti.LETTURA));

			ValidatoreIdentificativi validatoreId = ValidatoreIdentificativi.newInstance();
			validatoreId.validaIdDominio("idDominio", idDominio);

			LeggiRicevutaDTO leggiRptDTO = new LeggiRicevutaDTO(user);
			leggiRptDTO.setIdDominio(idDominio);
			leggiRptDTO.setIuv(iuv);
			idRicevuta = idRicevuta.contains("%") ? URLDecoder.decode(idRicevuta,"UTF-8") : idRicevuta;
			leggiRptDTO.setCcp(idRicevuta);

			RptDAO ricevuteDAO = new RptDAO();

			LeggiRicevutaDTOResponse ricevutaDTOResponse = null;
			if(accept.toLowerCase().contains("application/pdf")) {
				leggiRptDTO.setFormato(FormatoRicevuta.PDF);
				ricevutaDTOResponse = ricevuteDAO.leggiRt(leggiRptDTO);
				String rtPdfEntryName = idDominio +"_"+ iuv + "_"+ idRicevuta + ".pdf";
				byte[] b = ricevutaDTOResponse.getPdf(); 

				checkAutorizzazioniUtenza(leggiRptDTO.getUser(), ricevutaDTOResponse.getRpt());
				this.log.debug(MessageFormat.format(BaseController.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName)); 
				return this.handleResponseOk(Response.status(Status.OK).type("application/pdf").entity(b).header("content-disposition", "attachment; filename=\""+rtPdfEntryName+"\""),transactionId).build();
			} else if(accept.toLowerCase().contains(MediaType.APPLICATION_JSON)) {
				leggiRptDTO.setFormato(FormatoRicevuta.JSON);
				ricevutaDTOResponse = ricevuteDAO.leggiRt(leggiRptDTO);

				checkAutorizzazioniUtenza(leggiRptDTO.getUser(), ricevutaDTOResponse.getRpt());

				Ricevuta response =  RicevuteConverter.toRsModel(ricevutaDTOResponse.getRpt(), user);

				return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();
			} else {
				// formato non accettato
				throw new NotAcceptableException("Avviso di pagamento non disponibile nel formato indicato nell'header Accept, ricevuto: '"+accept+"', consentiti: {'application/pdf','application/json'}");

			}
		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.log(ContextThreadLocal.get());
		}
	}

	private void checkAutorizzazioniUtenza(Authentication user, Rpt rpt) throws ServiceException, NotAuthorizedException {
		BDConfigWrapper configWrapper = new BDConfigWrapper(ContextThreadLocal.get().getTransactionId(), true);
		PagamentoPortale pagamentoPortale = rpt.getPagamentoPortale(configWrapper);
		Versamento versamento = rpt.getVersamento(); 
		GovpayLdapUserDetails details = AutorizzazioneUtils.getAuthenticationDetails(user);
		if(details.getTipoUtenza().equals(TIPO_UTENZA.CITTADINO)) {
			if(pagamentoPortale != null) {
				if((pagamentoPortale.getVersanteIdentificativo() == null || !pagamentoPortale.getVersanteIdentificativo().equals(details.getUtenza().getIdentificativo()))
						&& !versamento.getAnagraficaDebitore().getCodUnivoco().equals(details.getUtenza().getIdentificativo())) {
					throw AuthorizationManager.toNotAuthorizedException(user, "la transazione riferisce un pagamento che non appartiene al cittadino chiamante");
				}
			}
		}

		if(details.getTipoUtenza().equals(TIPO_UTENZA.ANONIMO)) {
			if(pagamentoPortale != null) {
				if(pagamentoPortale.getVersanteIdentificativo() == null || !pagamentoPortale.getVersanteIdentificativo().equals(TIPO_UTENZA.ANONIMO.toString())) {
					throw AuthorizationManager.toNotAuthorizedException(user);
				}

				// pagamento terminato e' disponibile solo per un numero di minuti definito in configurazione
				if(pagamentoPortale.getDataRichiesta() != null) {
					long dataPagamentoTime = pagamentoPortale.getDataRichiesta().getTime();
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(new Date());
					calendar.add(Calendar.MINUTE, -GovpayConfig.getInstance().getIntervalloDisponibilitaPagamentoUtenzaAnonima());
					long riferimentoTime = calendar.getTimeInMillis();

					// il pagamento e' stato eseguito prima dei minuti precedenti il momento della richiesta.
					if(dataPagamentoTime < riferimentoTime)
						throw AuthorizationManager.toNotAuthorizedException(user);
				}
			}
		}

		// se sei una applicazione allora vedi i pagamenti che hai caricato
		if(details.getTipoUtenza().equals(TIPO_UTENZA.APPLICAZIONE)) {
			if(pagamentoPortale != null) {
				if(pagamentoPortale.getApplicazione(configWrapper) == null || 
						!pagamentoPortale.getApplicazione(configWrapper).getCodApplicazione().equals(details.getApplicazione().getCodApplicazione())) {
					throw AuthorizationManager.toNotAuthorizedException(user, "la transazione riferisce un pagamento che non appartiene all'applicazione chiamante");
				}
			}
		}
	}
}

