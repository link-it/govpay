package it.govpay.ragioneria.v3.api.impl;

import java.net.URLDecoder;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.openspcoop2.utils.service.context.ContextThreadLocal;
import org.springframework.security.core.Authentication;

import it.govpay.bd.model.IdUnitaOperativa;
import it.govpay.core.autorizzazione.AuthorizationManager;
import it.govpay.core.beans.Costanti;
import it.govpay.core.dao.pagamenti.RptDAO;
import it.govpay.core.dao.pagamenti.dto.LeggiRptDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiRptDTOResponse;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTOResponse;
import it.govpay.core.utils.SimpleDateFormatUtils;
import it.govpay.core.utils.validator.ValidatorFactory;
import it.govpay.core.utils.validator.ValidatoreIdentificativi;
import it.govpay.core.utils.validator.ValidatoreUtils;
import it.govpay.model.Acl.Diritti;
import it.govpay.model.Acl.Servizio;
import it.govpay.model.Rpt.EsitoPagamento;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.ragioneria.v3.api.RicevuteApi;
import it.govpay.ragioneria.v3.beans.Ricevuta;
import it.govpay.ragioneria.v3.beans.Ricevute;
import it.govpay.ragioneria.v3.beans.RicevuteRisultati;
import it.govpay.ragioneria.v3.beans.converter.RicevuteConverter;


/**
 * GovPay - API Ragioneria
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class RicevuteApiServiceImpl extends BaseApiServiceImpl  implements RicevuteApi {
    
	public RicevuteApiServiceImpl() {
		super("ricevute", RicevuteApiServiceImpl.class);
	}
	
	/**
     * Ricerca delle ricevute di pagamento
     *
     */
    public Response findRicevute(Integer pagina, Integer risultatiPerPagina, String ordinamento, String idDominio, String dataDa, String dataA, Boolean metadatiPaginazione, Boolean maxRisultati, String iuv) {
        Authentication user = this.getUser();
        String methodName = "findRicevute";  
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName)); 
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.OPERATORE, TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.PENDENZE), Arrays.asList(Diritti.LETTURA));

			ValidatorFactory vf = ValidatorFactory.newInstance();
			ValidatoreUtils.validaRisultatiPerPagina(vf, Costanti.PARAMETRO_RISULTATI_PER_PAGINA, risultatiPerPagina);
			
			// Parametri - > DTO Input 

			ListaRptDTO listaRptDTO = new ListaRptDTO(user);
			listaRptDTO.setLimit(risultatiPerPagina);
			listaRptDTO.setPagina(pagina);
			listaRptDTO.setEseguiCount(metadatiPaginazione);
			listaRptDTO.setEseguiCountConLimit(maxRisultati);

//			if(esito != null) {
//				EsitoRpt esitoRPT = EsitoRpt.fromValue(esito);
//				
//				if (esitoRPT != null) {
					EsitoPagamento esitoPagamento = null;;
//					switch(esitoRPT) {
//					case DECORENNZA_PARZIALE:
//						esitoPagamento = EsitoPagamento.DECORRENZA_TERMINI_PARZIALE;
//						break;
//					case DECORRENZA:
//						esitoPagamento = EsitoPagamento.DECORRENZA_TERMINI;
//						break;
//					case ESEGUITO:
						esitoPagamento = EsitoPagamento.PAGAMENTO_ESEGUITO;
//						break;
//					case ESEGUITO_PARZIALE:
//						esitoPagamento = EsitoPagamento.PAGAMENTO_PARZIALMENTE_ESEGUITO;
//						break;
//					case IN_CORSO:
//						esitoPagamento = EsitoPagamento.IN_CORSO;
//						break;
//					case NON_ESEGUITO:
//						esitoPagamento = EsitoPagamento.PAGAMENTO_NON_ESEGUITO;
//						break;
//					case RIFIUTATO:
//						esitoPagamento = EsitoPagamento.RIFIUTATO;
//						break;
//					}
					listaRptDTO.setEsitoPagamento(esitoPagamento);
//				} else {
//					throw new ValidationException("Codifica inesistente per esito. Valore fornito [" + esito
//							+ "] valori possibili " + ArrayUtils.toString(EsitoRpt.values()));
//				}
//			}
			if(idDominio != null)
				listaRptDTO.setIdDominio(idDominio);
			if(iuv != null)
				listaRptDTO.setIuv(iuv);
			if(ordinamento != null)
				listaRptDTO.setOrderBy(ordinamento);
			
			// dat RPT
//			if(dataRptDa!=null) {
//				Date dataDaDate = SimpleDateFormatUtils.getDataDaConTimestamp(dataRptDa, "dataRptDa");
//				listaRptDTO.setDataDa(dataDaDate);
//			}
//			
//			if(dataRptA!=null) {
//				Date dataADate = SimpleDateFormatUtils.getDataAConTimestamp(dataRptA, "dataRptA");
//				listaRptDTO.setDataA(dataADate);
//			}
			
			// data RT
			if(dataDa!=null) {
				Date dataDaDate = SimpleDateFormatUtils.getDataDaConTimestamp(dataDa, "dataDa");
				listaRptDTO.setDataRtDa(dataDaDate);
			}
				
			
			if(dataA!=null) {
				Date dataADate = SimpleDateFormatUtils.getDataAConTimestamp(dataA, "dataA");
				listaRptDTO.setDataRtA(dataADate);
			}
			
			// INIT DAO

			RptDAO rptDAO = new RptDAO();

			// Autorizzazione sui domini
//			List<String> domini = AuthorizationManager.getDominiAutorizzati(user);
//			if(domini == null) {
//				throw AuthorizationManager.toNotAuthorizedExceptionNessunDominioAutorizzato(user);
//			}
//			listaRptDTO.setCodDomini(domini);
			
			// Autorizzazione sulle uo
			List<IdUnitaOperativa> uo = AuthorizationManager.getUoAutorizzate(user);
			if(uo == null) {
				throw AuthorizationManager.toNotAuthorizedExceptionNessunaUOAutorizzata(user);
			}
			listaRptDTO.setUnitaOperative(uo);

			ListaRptDTOResponse listaRptDTOResponse = rptDAO.listaRpt(listaRptDTO);

			// CONVERT TO JSON DELLA RISPOSTA
			Ricevute response = new Ricevute(this.getServicePath(uriInfo), listaRptDTOResponse.getTotalResults(), pagina, risultatiPerPagina);
			
			List<RicevuteRisultati> results = new ArrayList<>();
			for(LeggiRptDTOResponse leggiRptDtoResponse: listaRptDTOResponse.getResults()) {
				results.add(RicevuteConverter.toRsModelIndex(leggiRptDtoResponse.getRpt()));
			}
			response.setRisultati(results);

			this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName)); 
			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();
		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.log(ContextThreadLocal.get());
		}
    }
    
    /**
     * Acquisizione di una ricevuta di avvenuto pagamento pagoPA
     *
     * Ricevuta pagoPA, sia questa veicolata nella forma di &#x60;RT&#x60; o di &#x60;recepit&#x60;, di esito positivo. 
     *
     */
    public Response getRicevuta(String idDominio, String iuv, String idRicevuta) {
        Authentication user = this.getUser();
        String methodName = "getRicevuta";  
		String transactionId = ContextThreadLocal.get().getTransactionId();		
		this.log.debug(MessageFormat.format(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName)); 

		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.OPERATORE, TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.PENDENZE), Arrays.asList(Diritti.LETTURA));
			
			ValidatoreIdentificativi validatoreId = ValidatoreIdentificativi.newInstance();
			validatoreId.validaIdDominio("idDominio", idDominio);

			LeggiRptDTO leggiRptDTO = new LeggiRptDTO(user);
			leggiRptDTO.setIdDominio(idDominio);
			leggiRptDTO.setIuv(iuv);
			idRicevuta = idRicevuta.contains("%") ? URLDecoder.decode(idRicevuta,"UTF-8") : idRicevuta;
			leggiRptDTO.setCcp(idRicevuta);
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(leggiRptDTO.getUser(), idDominio)) {
				throw AuthorizationManager.toNotAuthorizedException(leggiRptDTO.getUser(),idDominio, null);
			}

			RptDAO ricevuteDAO = new RptDAO(); 

			LeggiRptDTOResponse leggiRptDTOResponse = ricevuteDAO.leggiRpt(leggiRptDTO);

			Ricevuta response =  RicevuteConverter.toRsModel(leggiRptDTOResponse.getRpt());
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(user, leggiRptDTOResponse.getDominio().getCodDominio())) {
				throw AuthorizationManager.toNotAuthorizedException(user, leggiRptDTOResponse.getDominio().getCodDominio(), null);
			}

			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();
		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.log(ContextThreadLocal.get());
		}
    }
    
}

