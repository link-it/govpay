/*
 * GovPay - Porta di Accesso al Nodo dei Pagamenti SPC
 * http://www.gov4j.it/govpay
 *
 * Copyright (c) 2014-2025 Link.it srl (http://www.link.it).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3, as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package it.govpay.ragioneria.v3.api.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.Status;

import org.openspcoop2.utils.service.context.ContextThreadLocal;
import org.springframework.security.core.Authentication;

import it.govpay.bd.viste.model.Rendicontazione;
import it.govpay.core.autorizzazione.AuthorizationManager;
import it.govpay.core.beans.Costanti;
import it.govpay.core.dao.pagamenti.RendicontazioniDAO;
import it.govpay.core.dao.pagamenti.dto.LeggiFrDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiFrDTOResponse;
import it.govpay.core.dao.pagamenti.dto.ListaRendicontazioniDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRendicontazioniDTOResponse;
import it.govpay.core.utils.GpContext;
import it.govpay.core.utils.SimpleDateFormatUtils;
import it.govpay.core.utils.validator.ValidatorFactory;
import it.govpay.core.utils.validator.ValidatoreUtils;
import it.govpay.model.Acl.Diritti;
import it.govpay.model.Acl.Servizio;
import it.govpay.model.Fr.StatoFr;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.ragioneria.v3.api.RendicontazioniApi;
import it.govpay.ragioneria.v3.beans.FlussiRendicontazione;
import it.govpay.ragioneria.v3.beans.FlussoRendicontazione;
import it.govpay.ragioneria.v3.beans.FlussoRendicontazioneIndex;
import it.govpay.ragioneria.v3.beans.StatoFlussoRendicontazione;
import it.govpay.ragioneria.v3.beans.converter.FlussiRendicontazioneConverter;


/**
 * GovPay - API Ragioneria
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class RendicontazioniApiServiceImpl extends BaseApiServiceImpl implements RendicontazioniApi {


	public RendicontazioniApiServiceImpl() {
		super("flussiRendicontazione", RendicontazioniApiServiceImpl.class);
	}

	/**
     * Elenco dei flussi di rendicontazione acquisite da pagoPa
     *
     */
    @Override
	public Response findFlussiRendicontazione(Integer pagina, Integer risultatiPerPagina, String ordinamento, String idDominio, String dataDa, String dataA, String stato, Boolean metadatiPaginazione, Boolean maxRisultati, String iuv, String idFlusso, Boolean escludiObsoleti) {
    	this.buildContext();
    	Authentication user = this.getUser();
    	String methodName = "findFlussiRendicontazione";
    	String transactionId = ContextThreadLocal.get().getTransactionId();
		this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName);
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_RAGIONERIA), Arrays.asList(Diritti.LETTURA));

			ValidatorFactory vf = ValidatorFactory.newInstance();
			ValidatoreUtils.validaRisultatiPerPagina(vf, Costanti.PARAMETRO_RISULTATI_PER_PAGINA, risultatiPerPagina);

			// Parametri - > DTO Input

			ListaRendicontazioniDTO findRendicontazioniDTO = new ListaRendicontazioniDTO(user);
			findRendicontazioniDTO.setIdDominio(idDominio);
			((GpContext) (ContextThreadLocal.get()).getApplicationContext()).getEventoCtx().setCodDominio(idDominio);
			findRendicontazioniDTO.setLimit(risultatiPerPagina);
			findRendicontazioniDTO.setPagina(pagina);
			findRendicontazioniDTO.setOrderBy(ordinamento);
			if(dataDa != null) {
				Date dataDaDate = SimpleDateFormatUtils.getDataDaConTimestamp(dataDa, "dataDa");
				findRendicontazioniDTO.setDataAcquisizioneFlussoDa(dataDaDate);
			}
			if(dataA != null) {
				Date dataADate = SimpleDateFormatUtils.getDataAConTimestamp(dataA, "dataA");
				findRendicontazioniDTO.setDataAcquisizioneFlussoA(dataADate);
			}
			if(stato != null) {
				StatoFlussoRendicontazione sfr = StatoFlussoRendicontazione.fromValue(stato);

				if(sfr != null) {
					switch (sfr) {
					case ACQUISITO:
						findRendicontazioniDTO.setStato(StatoFr.ACCETTATA);
						break;
					case ANOMALO:
						findRendicontazioniDTO.setStato(StatoFr.ANOMALA);
						break;
					case RIFIUTATO:
						findRendicontazioniDTO.setStato(StatoFr.RIFIUTATA);
						break;
					}
				}
			}

			// Autorizzazione sui domini
			List<String> dominiAutorizzati = AuthorizationManager.getDominiAutorizzati(user);
			findRendicontazioniDTO.setCodDomini(dominiAutorizzati);
			if(escludiObsoleti != null && escludiObsoleti.booleanValue()) {
				findRendicontazioniDTO.setFrObsoleto(!escludiObsoleti);
			}
			findRendicontazioniDTO.setIuv(iuv);
			findRendicontazioniDTO.setRicercaIdFlussoCaseInsensitive(true);
			findRendicontazioniDTO.setCodFlusso(idFlusso);
			findRendicontazioniDTO.setRicercaFR(true);

			findRendicontazioniDTO.setEseguiCount(metadatiPaginazione);
			findRendicontazioniDTO.setEseguiCountConLimit(maxRisultati);

			RendicontazioniDAO rendicontazioniDAO = new RendicontazioniDAO();

			// CHIAMATA AL DAO

			ListaRendicontazioniDTOResponse findRendicontazioniDTOResponse = dominiAutorizzati != null ? rendicontazioniDAO.listaRendicontazioni(findRendicontazioniDTO)
					: new ListaRendicontazioniDTOResponse(0L, new ArrayList<>());

			// CONVERT TO JSON DELLA RISPOSTA

			List<FlussoRendicontazioneIndex> collect = new ArrayList<>();

			for(Rendicontazione res: findRendicontazioniDTOResponse.getResults()) {
				collect.add(FlussiRendicontazioneConverter.toRsIndexModel(res.getFr()));
			}

			FlussiRendicontazione response = new FlussiRendicontazione(this.getServicePathConURIAssoluta(uriInfo, httpHeaders), findRendicontazioniDTOResponse.getTotalResults(), pagina, risultatiPerPagina);
			response.setRisultati(collect);
			this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName);

			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();

		}catch (Exception e) {
			return this.handleException(methodName, e, transactionId);
		} finally {
			this.logContext(ContextThreadLocal.get());
		}
    }

    /**
     * Acquisizione di un flusso di rendicontazione
     *
     */
    @Override
	public Response getFlussoRendicontazione(String idDominio, String idFlusso) {
        return this.getFlussoRendicontazione(idDominio, idFlusso, null);
    }

    /**
     * Acquisizione di un flusso di rendicontazione
     *
     */
    @Override
	public Response getFlussoRendicontazione(String idDominio, String idFlusso, String dataOraFlusso) {
    	this.buildContext();
    	Authentication user = this.getUser();
    	String methodName = "getFlussoRendicontazione";
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName);
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_RAGIONERIA), Arrays.asList(Diritti.LETTURA));

			String accept = MediaType.APPLICATION_JSON;
			if(httpHeaders.getRequestHeaders().containsKey("Accept")) {
				accept = httpHeaders.getRequestHeaders().get("Accept").get(0).toLowerCase();
			}

			// Parametri - > DTO Input

			LeggiFrDTO leggiRendicontazioneDTO = new LeggiFrDTO(user, idFlusso);
			leggiRendicontazioneDTO.setIdDominio(idDominio);
			leggiRendicontazioneDTO.setAccept(accept);

			if(dataOraFlusso != null) {
				Date dataOraFlussoDate = SimpleDateFormatUtils.getDataDaConTimestamp(dataOraFlusso, "dataOraFlusso");
				leggiRendicontazioneDTO.setDataOraFlusso(dataOraFlussoDate);
			} else {
				leggiRendicontazioneDTO.setObsoleto(false);
			}
			// INIT DAO

			RendicontazioniDAO rendicontazioniDAO = new RendicontazioniDAO();

			// CHIAMATA AL DAO

			LeggiFrDTOResponse leggiRendicontazioneDTOResponse = rendicontazioniDAO.leggiFlussoRendicontazione(leggiRendicontazioneDTO);

			// controllo che il dominio sia autorizzato
			if(leggiRendicontazioneDTOResponse.getDominio() != null && !AuthorizationManager.isDominioAuthorized(user, leggiRendicontazioneDTOResponse.getDominio().getCodDominio())) {
				throw AuthorizationManager.toNotAuthorizedException(user,leggiRendicontazioneDTOResponse.getDominio().getCodDominio(), null);
			}
			// CONVERT TO JSON DELLA RISPOSTA
			if(accept.toLowerCase().contains(MediaType.APPLICATION_XML)) {
				byte[] response = leggiRendicontazioneDTOResponse.getFr().getXml();
				this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName);
				return this.handleResponseOk(Response.status(Status.OK).entity(new String(response)).type(MediaType.APPLICATION_XML),transactionId).build();
			} else {
				FlussoRendicontazione response = FlussiRendicontazioneConverter.toRsModel(leggiRendicontazioneDTOResponse.getFr(), leggiRendicontazioneDTOResponse.getRendicontazioni());
				this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName);
				return this.handleResponseOk(Response.status(Status.OK).entity(response).type(MediaType.APPLICATION_JSON),transactionId).build();
			}

		}catch (Exception e) {
			return this.handleException(methodName, e, transactionId);
		} finally {
			this.logContext(ContextThreadLocal.get());
		}
    }

}
