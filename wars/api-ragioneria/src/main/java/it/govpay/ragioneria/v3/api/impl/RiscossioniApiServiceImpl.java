/*
 * GovPay - Porta di Accesso al Nodo dei Pagamenti SPC
 * http://www.gov4j.it/govpay
 *
 * Copyright (c) 2014-2025 Link.it srl (http://www.link.it).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3, as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package it.govpay.ragioneria.v3.api.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.lang3.ArrayUtils;
import org.openspcoop2.utils.service.context.ContextThreadLocal;
import org.springframework.security.core.Authentication;

import it.govpay.bd.model.SingoloVersamento;
import it.govpay.bd.model.Versamento;
import it.govpay.bd.viste.model.Pagamento;
import it.govpay.core.autorizzazione.AuthorizationManager;
import it.govpay.core.beans.Costanti;
import it.govpay.core.dao.pagamenti.RiscossioniDAO;
import it.govpay.core.dao.pagamenti.dto.LeggiRiscossioneDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiRiscossioneDTOResponse;
import it.govpay.core.dao.pagamenti.dto.ListaRiscossioniDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRiscossioniDTOResponse;
import it.govpay.core.exceptions.ValidationException;
import it.govpay.core.utils.SimpleDateFormatUtils;
import it.govpay.core.utils.validator.ValidatorFactory;
import it.govpay.core.utils.validator.ValidatoreIdentificativi;
import it.govpay.core.utils.validator.ValidatoreUtils;
import it.govpay.model.Acl.Diritti;
import it.govpay.model.Acl.Servizio;
import it.govpay.model.Pagamento.Stato;
import it.govpay.model.Pagamento.TipoPagamento;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.ragioneria.v3.api.RiscossioniApi;
import it.govpay.ragioneria.v3.beans.Riscossione;
import it.govpay.ragioneria.v3.beans.Riscossioni;
import it.govpay.ragioneria.v3.beans.StatoRiscossione;
import it.govpay.ragioneria.v3.beans.TipoRiscossione;
import it.govpay.ragioneria.v3.beans.converter.RiscossioniConverter;


/**
 * GovPay - API Ragioneria
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class RiscossioniApiServiceImpl extends BaseApiServiceImpl  implements RiscossioniApi {

	public RiscossioniApiServiceImpl() {
		super("riscossioni", RiscossioniApiServiceImpl.class);
	}

	/**
     * Elenco degli importi riscossi o stornati
     *
     */
    @Override
	public Response findRiscossioni(Integer pagina, Integer risultatiPerPagina, String campi, String ordinamento, String idDominio, String dataDa, String dataA, String stato, List<String> tipo, Boolean metadatiPaginazione, Boolean maxRisultati, String iur) {
    	this.buildContext();
    	Authentication user = this.getUser();
    	String methodName = "findRiscossioni";
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName);
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_RAGIONERIA), Arrays.asList(Diritti.LETTURA));

			ValidatorFactory vf = ValidatorFactory.newInstance();
			ValidatoreUtils.validaRisultatiPerPagina(vf, Costanti.PARAMETRO_RISULTATI_PER_PAGINA, risultatiPerPagina);

			// Parametri - > DTO Input

			ValidatoreIdentificativi validatoreId = ValidatoreIdentificativi.newInstance();
			if(idDominio != null)
				validatoreId.validaIdDominio("idDominio", idDominio);

			ListaRiscossioniDTO findRiscossioniDTO = new ListaRiscossioniDTO(user);
			findRiscossioniDTO.setIdDominio(idDominio);
			findRiscossioniDTO.setLimit(risultatiPerPagina);
			findRiscossioniDTO.setPagina(pagina);
			findRiscossioniDTO.setIur(iur);
			findRiscossioniDTO.setOrderBy(ordinamento);
			if(stato != null) {
				StatoRiscossione statoRisc = StatoRiscossione.fromValue(stato);
				if(statoRisc != null) {
					switch(statoRisc) {
					case INCASSATA: findRiscossioniDTO.setStato(Stato.INCASSATO);
						break;
					case RISCOSSA: findRiscossioniDTO.setStato(Stato.PAGATO);
						break;
					default:
						break;
					}
				} else {
					throw new ValidationException("Codifica inesistente per stato. Valore fornito [" + stato
							+ "] valori possibili " + ArrayUtils.toString(StatoRiscossione.values()));
				}
			}

			if(dataDa!=null) {
				Date dataDaDate = SimpleDateFormatUtils.getDataDaConTimestamp(dataDa, "dataDa");
				findRiscossioniDTO.setDataRiscossioneDa(dataDaDate);
			}


			if(dataA!=null) {
				Date dataADate = SimpleDateFormatUtils.getDataAConTimestamp(dataA, "dataA");
				findRiscossioniDTO.setDataRiscossioneA(dataADate);
			}

			List<TipoPagamento> tipoEnum = new ArrayList<>();
			if(tipo == null || tipo.isEmpty()) { // valori di default
				tipoEnum.add(TipoPagamento.ENTRATA);
				tipoEnum.add(TipoPagamento.MBT);
			}

			if(tipo!=null) {
				for (String tipoS : tipo) {
					TipoRiscossione tipoRiscossione = TipoRiscossione.fromValue(tipoS);
					if(tipoRiscossione != null) {
						tipoEnum.add(TipoPagamento.valueOf(tipoRiscossione.toString()));
					} else {
						throw new ValidationException("Codifica inesistente per tipo. Valore fornito [" + tipo + "] valori possibili " + ArrayUtils.toString(TipoRiscossione.values()));
					}
				}
			}

			findRiscossioniDTO.setTipo(tipoEnum);

			// Autorizzazione sui domini
			List<String> domini = AuthorizationManager.getDominiAutorizzati(user);
			findRiscossioniDTO.setCodDomini(domini);

			findRiscossioniDTO.setEseguiCount(metadatiPaginazione);
			findRiscossioniDTO.setEseguiCountConLimit(maxRisultati);
			findRiscossioniDTO.setDeep(true);

			RiscossioniDAO riscossioniDAO = new RiscossioniDAO();

			// CHIAMATA AL DAO

			ListaRiscossioniDTOResponse findRiscossioniDTOResponse = domini != null ? riscossioniDAO.listaRiscossioni(findRiscossioniDTO) : new ListaRiscossioniDTOResponse(0L, new ArrayList<>());

			// CONVERT TO JSON DELLA RISPOSTA

			List<Riscossione> lst = new ArrayList<>();

			for(Pagamento result: findRiscossioniDTOResponse.getResults()) {
				SingoloVersamento singoloVersamento = result.getSingoloVersamento();
				Versamento versamento = result.getVersamento();
				it.govpay.bd.model.Pagamento pagamento = result.getPagamento();
				lst.add(RiscossioniConverter.toRsModel(pagamento, singoloVersamento, versamento));
			}


			Riscossioni response = new Riscossioni(this.getServicePathConURIAssoluta(uriInfo, httpHeaders), findRiscossioniDTOResponse.getTotalResults(), pagina, risultatiPerPagina);
			response.setRisultati(lst);

			this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName);
			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();

		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.logContext(ContextThreadLocal.get());
		}
    }

    /**
     * Dettaglio di una riscossione
     *
     */
    @Override
	public Response getRiscossione(String idDominio, String iuv, String iur, Integer indice) {
    	this.buildContext();
    	Authentication user = this.getUser();
    	String methodName = "getRiscossione";
		String transactionId = ContextThreadLocal.get().getTransactionId();
		this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_IN_CORSO, methodName);
		try{
			// autorizzazione sulla API
			this.isAuthorized(user, Arrays.asList(TIPO_UTENZA.APPLICAZIONE), Arrays.asList(Servizio.API_RAGIONERIA), Arrays.asList(Diritti.LETTURA));

			ValidatoreIdentificativi validatoreId = ValidatoreIdentificativi.newInstance();
			validatoreId.validaIdDominio("idDominio", idDominio);

			// Parametri - > DTO Input

			LeggiRiscossioneDTO getRiscossioneDTO = new LeggiRiscossioneDTO(user, idDominio, iuv, iur, indice);

			// INIT DAO

			RiscossioniDAO riscossioniDAO = new RiscossioniDAO();

			// CHIAMATA AL DAO

			LeggiRiscossioneDTOResponse getRiscossioneDTOResponse = riscossioniDAO.leggiRiscossione(getRiscossioneDTO);

			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(user, getRiscossioneDTOResponse.getDominio().getCodDominio())) {
				throw AuthorizationManager.toNotAuthorizedException(user,getRiscossioneDTOResponse.getDominio().getCodDominio(), null);
			}

			// CONVERT TO JSON DELLA RISPOSTA

			it.govpay.bd.model.Pagamento pagamento = getRiscossioneDTOResponse.getPagamento();
			SingoloVersamento singoloVersamento = pagamento.getSingoloVersamento();
			Versamento versamento = singoloVersamento.getVersamento(null);
			Riscossione response = RiscossioniConverter.toRsModel(pagamento, singoloVersamento, versamento);

			this.logDebug(BaseApiServiceImpl.LOG_MSG_ESECUZIONE_METODO_COMPLETATA, methodName);
			return this.handleResponseOk(Response.status(Status.OK).entity(response),transactionId).build();

		}catch (Exception e) {
			return this.handleException(uriInfo, httpHeaders, methodName, e, transactionId);
		} finally {
			this.logContext(ContextThreadLocal.get());
		}
    }

}
