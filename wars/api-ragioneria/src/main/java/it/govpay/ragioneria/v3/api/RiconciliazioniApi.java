/*
 * GovPay - Porta di Accesso al Nodo dei Pagamenti SPC
 * http://www.gov4j.it/govpay
 *
 * Copyright (c) 2014-2025 Link.it srl (http://www.link.it).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3, as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package it.govpay.ragioneria.v3.api;

import java.io.InputStream;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Pattern;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DefaultValue;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.Response;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import it.govpay.ragioneria.v3.beans.FaultBean;
import it.govpay.ragioneria.v3.beans.Riconciliazione;
import it.govpay.ragioneria.v3.beans.Riconciliazioni;

/**
 * GovPay - API Ragioneria
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
@Path("/")
public interface RiconciliazioniApi  {

    /**
     * Riconciliazione di un movimento di cassa
     *
     */
    @PUT
    @Path("/riconciliazioni/{idDominio}/{id}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @Operation(summary = "Riconciliazione di un movimento di cassa", tags={ "Riconciliazioni" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Riconciliazione", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Riconciliazione.class))),
        @ApiResponse(responseCode = "202", description = "Richiesta accettata"),
        @ApiResponse(responseCode = "400", description = "Richiesta non correttamente formata", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FaultBean.class))),
        @ApiResponse(responseCode = "401", description = "Richiesta non autenticata"),
        @ApiResponse(responseCode = "403", description = "Richiesta non autorizzata"),
        @ApiResponse(responseCode = "500", description = "Servizio non disponibile", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FaultBean.class))) })
    public Response addRiconciliazione(@PathParam("idDominio") @Pattern(regexp="(^([0-9]){11}$)") String idDominio, @PathParam("id") @Pattern(regexp="(^([0-9A-Za-z]){1,35}$)") String id, InputStream is);

    /**
     * Elenco dei movimenti di cassa riconciliati
     *
     */
    @GET
    @Path("/riconciliazioni")
    @Produces({ "application/json" })
    @Operation(summary = "Elenco dei movimenti di cassa riconciliati", tags={ "Riconciliazioni" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Dettaglio dell'incasso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Riconciliazioni.class))),
        @ApiResponse(responseCode = "400", description = "Richiesta non correttamente formata", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FaultBean.class))),
        @ApiResponse(responseCode = "401", description = "Richiesta non autenticata"),
        @ApiResponse(responseCode = "403", description = "Richiesta non autorizzata"),
        @ApiResponse(responseCode = "500", description = "Servizio non disponibile", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FaultBean.class))) })
    public Response findRiconciliazioni(@QueryParam("pagina")  @DefaultValue("1") Integer pagina, @QueryParam("risultatiPerPagina") @Max(200) @DefaultValue("25") Integer risultatiPerPagina, @QueryParam("idDominio") @Pattern(regexp="(^([0-9]){11}$)") String idDominio, @QueryParam("dataDa") String dataDa, @QueryParam("dataA") String dataA, @QueryParam("metadatiPaginazione") @DefaultValue("true") Boolean metadatiPaginazione, @QueryParam("maxRisultati") @DefaultValue("true") Boolean maxRisultati, @QueryParam("sct") String sct);

    /**
     * Dettaglio di un movimento di cassa riconciliato
     *
     */
    @GET
    @Path("/riconciliazioni/{idDominio}/{id}")
    @Produces({ "application/json" })
    @Operation(summary = "Dettaglio di un movimento di cassa riconciliato", tags={ "Riconciliazioni" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Riconciliazione", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Riconciliazione.class))),
        @ApiResponse(responseCode = "401", description = "Richiesta non autenticata"),
        @ApiResponse(responseCode = "403", description = "Richiesta non autorizzata"),
        @ApiResponse(responseCode = "404", description = "Risorsa inesistente"),
        @ApiResponse(responseCode = "500", description = "Servizio non disponibile", content = @Content(mediaType = "application/json", schema = @Schema(implementation = FaultBean.class))) })
    public Response getRiconciliazione(@PathParam("idDominio") @Pattern(regexp="(^([0-9]){11}$)") String idDominio, @PathParam("id") @Pattern(regexp="(^([0-9A-Za-z]){1,35}$)") String id);
}
